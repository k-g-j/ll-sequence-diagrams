@startuml atlas-architecture
!pragma layout smetana

!define FONTSIZE 11
!define FONTFAMILY Helvetica

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title LayerLens Atlas App Architecture
SHOW_PERSON_OUTLINE()

Person(user, "User", "Application user")

Container_Boundary(atlas_frontend, "Atlas Frontend") {
    Component(web_ui, "Atlas Web UI", "React", "Web interface")
    Component(nextjs, "Next.js App", "Node.js", "Application framework")
    Component(auth, "Authentication Module", "NextAuth", "Auth provider")
    Component(viz, "Results Visualization", "React", "Charts and dashboards")
}

Container_Boundary(api_layer, "API Layer") {
    Component(api_gw, "API Gateway", "Go", "API access control")
    Component(go_backend, "Go Backend API", "Go", "Business logic")
    Component(websocket, "WebSocket Service", "Go", "Real-time updates")
    Component(rate_limiter, "Rate Limiter", "Go", "Request limiting")
}

Container_Boundary(core_services, "Core Services") {
    Component(eval_manager, "Evaluation Manager", "Go", "Manages evaluations")
    Component(model_registry, "Model Registry", "Go", "Tracks models")
    Component(dataset_manager, "Dataset Manager", "Go", "Manages datasets")
    Component(user_manager, "User Manager", "Go", "User management")
    Component(results_processor, "Results Processor", "Go", "Processes results")
}

Container_Boundary(integration, "Integration Layer") {
    Component(worker, "Evaluation Worker", "Go", "Work processor")
    Component(contract_client, "Smart Contract Client", "Go", "Blockchain client")
    Component(metrics, "Metrics Collector", "Go", "Collects metrics")
}

Container_Boundary(data_layer, "Data Layer") {
    ContainerDb(mongodb, "MongoDB", "NoSQL", "Main data store")
    ContainerDb(mariadb, "MariaDB", "SQL", "Metrics storage")
    ContainerDb(s3, "AWS S3", "Object Storage", "File storage")
    ContainerQueue(queue, "Message Queue", "Kafka", "Message passing")
}

Container_Boundary(external, "External Services") {
    Component(cognito, "AWS Cognito", "Auth", "Authentication")
    Component(avs, "LayerLens AVS", "Service", "Validation service")
    Component(llms, "LLM Providers", "API", "Model inference")
}

Rel(user, web_ui, "Uses")
Rel(web_ui, nextjs, "Renders through")
Rel(nextjs, auth, "Authenticates with")
Rel(nextjs, viz, "Displays with")
Rel(nextjs, api_gw, "Makes requests to")

Rel(auth, cognito, "Verifies with")
Rel(api_gw, go_backend, "Routes to")
Rel(api_gw, websocket, "Connects to")
Rel(api_gw, rate_limiter, "Limits through")

Rel(go_backend, eval_manager, "Uses")
Rel(go_backend, model_registry, "Uses")
Rel(go_backend, dataset_manager, "Uses")
Rel(go_backend, user_manager, "Uses")
Rel(go_backend, results_processor, "Uses")

Rel(eval_manager, mongodb, "Stores data in")
Rel(model_registry, mongodb, "Stores data in")
Rel(dataset_manager, mongodb, "Stores data in")
Rel(user_manager, mongodb, "Stores data in")
Rel(results_processor, mariadb, "Stores metrics in")

Rel(eval_manager, queue, "Publishes to")
Rel(queue, worker, "Consumes from")
Rel(worker, contract_client, "Calls")
Rel(worker, results_processor, "Processes with")
Rel(contract_client, avs, "Interacts with")
Rel(metrics, llms, "Calls")
Rel(metrics, mariadb, "Stores in")

Rel(dataset_manager, s3, "Stores files in")
Rel(results_processor, s3, "Stores results in")

@enduml