@startuml atlas-architecture
' Fix handwritten mode
!pragma layout smetana
!theme plain
!pragma svek_trace on

' Use more readable layout with larger size and horizontally wide diagram
skinparam componentStyle rectangle
skinparam backgroundColor white
skinparam defaultTextAlignment center
skinparam wrapWidth 400
skinparam nodesep 180
skinparam ranksep 180
skinparam pageBorderColor transparent

' Make diagram much larger and wider 
scale max 1000 width
scale max 1000 height
scale 1.8

' Fix arrow styling
skinparam ArrowColor black
skinparam ArrowThickness 2.0
skinparam ArrowFontColor black
skinparam ArrowFontSize 16

' Improve fonts and text
skinparam ComponentFontSize 18
skinparam ComponentFontStyle bold
skinparam PackageFontSize 20
skinparam PackageFontStyle bold
skinparam TitleFontSize 24
skinparam TitleFontStyle bold

title LayerLens Atlas App Architecture

package "User Interface Layer" {
  [Atlas Web UI] as WebUI #lightblue
  [Next.js App] as NextApp #lightblue
  [Authentication Module] as Auth #lightblue
  [Results Visualization] as Viz #lightblue
}

package "API Layer" {
  [API Gateway] as ApiGw #lightgreen
  [Go Backend API] as GoBackend #lightgreen
  [WebSocket Service] as WebSocket #lightgreen
  [Rate Limiter] as RateLim #lightgreen
}

package "Core Services" {
  [Evaluation Manager] as EvalManager #lightyellow
  [Model Registry] as ModelRegistry #lightyellow
  [Dataset Manager] as DatasetManager #lightyellow
  [User Manager] as UserManager #lightyellow
  [Results Processor] as ResultsProcessor #lightyellow
}

package "Integration Layer" {
  [Evaluation Worker] as Worker #pink
  [Smart Contract Client] as ContractClient #pink
  [Metrics Collector] as MetricsCollector #pink
}

package "Data Layer" {
  database "MongoDB" as MongoDB #lightgray {
    [Evaluations] as MongoEvals
    [Users] as MongoUsers
    [Datasets] as MongoDsets
  }
  
  database "MariaDB" as MariaDB #lightgray {
    [Aggregated Metrics] as MetricsDB
    [Historical Data] as HistoryDB
  }
  
  database "AWS S3" as S3 #lightgray {
    [Results Storage] as ResultsS3
    [Dataset Files] as DatasetsS3
  }
  
  queue "Message Queue" as Queue #lightgray
}

cloud "External Services" {
  [AWS Cognito] as Cognito #lavender
  [LayerLens AVS] as AVS #lavender
  [LLM Providers] as LLMs #lavender
}

' User interactions
WebUI -> NextApp
NextApp -> Auth
NextApp -> Viz
NextApp -> ApiGw

' API interactions
Auth -> Cognito
ApiGw -> GoBackend
ApiGw -> WebSocket
ApiGw -> RateLim

' Core service connections
GoBackend -> EvalManager
GoBackend -> ModelRegistry
GoBackend -> DatasetManager
GoBackend -> UserManager
GoBackend -> ResultsProcessor

' Data connections
EvalManager -> MongoEvals
ModelRegistry -> MongoEvals
DatasetManager -> MongoDsets
UserManager -> MongoUsers
ResultsProcessor -> MetricsDB
ResultsProcessor -> HistoryDB

' Integration connections
EvalManager -> Queue
Queue -> Worker
Worker -> ContractClient
Worker -> ResultsProcessor
ContractClient -> AVS
MetricsCollector -> LLMs
MetricsCollector -> MetricsDB

' Storage connections
DatasetManager -> DatasetsS3
ResultsProcessor -> ResultsS3

@enduml